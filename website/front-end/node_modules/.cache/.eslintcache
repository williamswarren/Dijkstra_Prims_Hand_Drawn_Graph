[{"/Users/warrenwilliams/Documents/School/UCSC Extension/Quarter 3/graph_monkey_frontend/src/index.js":"1","/Users/warrenwilliams/Documents/School/UCSC Extension/Quarter 3/graph_monkey_frontend/src/App.js":"2"},{"size":163,"mtime":1624476559440,"results":"3","hashOfConfig":"4"},{"size":3677,"mtime":1624477170931,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1apc1lh",{"filePath":"8","messages":"9","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/warrenwilliams/Documents/School/UCSC Extension/Quarter 3/graph_monkey_frontend/src/index.js",[],"/Users/warrenwilliams/Documents/School/UCSC Extension/Quarter 3/graph_monkey_frontend/src/App.js",["11","12","13","14","15","16","17"],"import React, {Component} from 'react';\nimport monkey from './monkey.png';\nimport styled, { keyframes } from \"styled-components\";\nimport { flip } from 'react-animations';\nimport axios from 'axios';\n\nconst FlipAnimation = keyframes`${flip}`;\nconst FlipDiv = styled.div`\n  animation: infinite 2s ${FlipAnimation};\n  top: 35%;\n  left: 40%;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n`;\n\n\nclass App extends Component {\n    state = { selectedFile: null,\n\t\t\t\timage1: null,\n\t\t\t\timage2: null,\n\t\t\t\timage3: null,\n\t\t\t\tajacency_list: null,\n\t\t\t\terror: false};\n\n\n\tonFileChange = (event) => {\n\t\tconst file = event.target.files[0]\n\t\tthis.setState({selectedFile: file});\n\t\tconsole.log(event)\n\t\tconsole.log(this.state)\n\t\t\t\n\t\tlet data = new FormData();\n\t\tdata.append('graph_image', file);\n\t\t\n\t\taxios.post('http://ec2-3-101-117-97.us-west-1.compute.amazonaws.com:3000',\n  \t\t\tdata)\n\t\t.then((response) => {\n\t\t\tconsole.log(\"Response\");\n  \t\t\tconsole.log(response);\n\n\t\t\tif (Object.keys(response.data).length != 4){\n\t\t\t\t\tthis.setState({error: true, \n                    selectedFile: null});}\n\t\t\telse{\n\t\t\tthis.setState({image1: new Buffer.from(response.data.image1).toString(\"base64\"),\n\t\t\t\t\t\timage2: new Buffer.from(response.data.image2).toString(\"base64\"),\n\t\t\t\t\t\timage3: new Buffer.from(response.data.image3).toString(\"base64\"),\n\t\t\t\t\t\tadjacency_list: new Buffer.from(response.data.adjacency_list).toString()})\n\t\t}}, (error) => {\n  \t\tconsole.log(error);\n\t\tthis.setState({error: true, \n\t\t\t\t\tselectedFile: null});\n\t\t});\n\n}\t\n\t\n\tprocessing = () => {\n\t\tif (this.state.selectedFile){\n\t\t\tif (this.state.image1){return (null)}\n    \treturn(\n\t\t<div>\n    \t\t<FlipDiv> <img className='image' src={monkey} /> </FlipDiv>\n\t\t\t<label style={{top:\"50% !important\", position: \"absolute\", display:\"flex\", margin: \"-150px 0 0 20px\"}}> LOADING (THIS WILL TAKE A LITTLE BIT) </label>\n\t\t</div>\n    \t);}\n    \telse{\n    \treturn(\n    \t<div>\n        \t<img className='image' src={monkey} />\n        \t<label style={{top:\"50% !important\", position: \"absolute\", display:\"flex\", margin: \"-150px 0 0 300px\"}}> UPLOAD PNG \n            \t<input type=\"file\" name=\"file\" onChange={this.onFileChange} />\n        \t</label>\n    \t</div>\n    \t);}\n}\n\n\n\tresult = () => {\n\t\tif (this.state.image1 && this.state.image2 && this.state.image3){\n\t\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='column'>\n\t\t\t\t\t\t<img width='300' height='300' src={'data:image/png;base64,' + this.state.image1}/>\n\t\t\t\t\t\t<a download=\"graphviz-image.png\" href={'data:image/png;base64,' + this.state.image1} > GRAPHVIZ IMAGE </a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='column'>\n\t\t\t\t\t\t<img width='300' height='300' src={'data:image/png;base64,' + this.state.image2}/>\n\t\t\t\t\t\t<a download=\"processed-image.png\" href={'data:image/png;base64,' + this.state.image2} > PROCESSED IMAGE </a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='column'>\n\t\t\t\t\t\t<img width='300' height='300' src={'data:image/png;base64,' + this.state.image3}/>\n\t\t\t\t\t\t<a download=\"nodes_weights.png\" href={'data:image/png;base64,' + this.state.image3} > NODES & WEIGHTS </a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>ADJACENCY LIST > {this.state.adjacency_list}</p>\n\t\t\t\t</div>\n\t\t\t</div>)}\n\t\telse if(this.state.error == true){\n\t\t\treturn(<label style={{top:\"50% !important\", position: \"absolute\", display:\"flex\", margin: \"-30px 0 0 -80px\", color: 'red', fontFamily: \"arial\", fontWeight: \"bold\", fontSize: \"30px\"}}> SORRY SOMETHING WENT WRONG :( PLEASE TRY AGAIN WITH A DIFFERENT IMAGE </label>\n\n)}\n\n}\n\t\n\n    render() {\n\t\tconsole.log(this.state.selectedFile)\n      return (\n\t\t<div>\n        \t<h> GRAPHMONKEY</h>\n\t\t\t{this.processing()}\n\t\t\t{this.result()}\n\t\t</div>\n     );\n   }\n }\n\nexport default App;\n",{"ruleId":"18","severity":1,"message":"19","line":42,"column":42,"nodeType":"20","messageId":"21","endLine":42,"endColumn":44},{"ruleId":"22","severity":1,"message":"23","line":63,"column":17,"nodeType":"24","endLine":63,"endColumn":55},{"ruleId":"22","severity":1,"message":"23","line":70,"column":10,"nodeType":"24","endLine":70,"endColumn":48},{"ruleId":"22","severity":1,"message":"23","line":85,"column":7,"nodeType":"24","endLine":85,"endColumn":89},{"ruleId":"22","severity":1,"message":"23","line":89,"column":7,"nodeType":"24","endLine":89,"endColumn":89},{"ruleId":"22","severity":1,"message":"23","line":93,"column":7,"nodeType":"24","endLine":93,"endColumn":89},{"ruleId":"18","severity":1,"message":"25","line":101,"column":28,"nodeType":"20","messageId":"21","endLine":101,"endColumn":30},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='."]